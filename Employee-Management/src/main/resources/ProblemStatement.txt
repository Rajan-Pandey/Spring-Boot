
                                  Employee API Spring Boot 

In this challenge, you are part of a company that is launching a new service that is responsible 
for maintaining employee information in the organization. One requirement is for a REST API service 
to provide employee information. Your task is to add functionality to add and delete employee 
information as well as perform some queries. You'll be dealing with typical information
for employee data like name, location, department, etc. 

The definitions and detailed requirements list are written below. 
You will be graded on whether your application performs data retrieval and 
manipulation based on given use cases exactly as described in the requirements. 

Each employee data is a JSON object describing the details of the employee. Each object has the following properties: 

	id – The Unique Id of every employee as generated by the system. [Integer] 
	name – The name of the employee. [ String] 
	age – The age of the employee. [ Integer] 
	location – The location of the employee. [ String] 
	department – The department of the employee. [ String] 
	Note: department can have values Electrical, Security or Housekeeping. 
	experience – The experience of the employee. [ Integer] 
	dateOfJoining – The current date generated from the system. [ String] 
	phone – The phone of the employee. [ Long] 
	Note:  phone can start with 6, 7, 8 or 9 and should have a length of 10 digits. 
	email – The email of the employee. [ String] 
	Note: email should be a valid one, email validator is given in regex format. 

 
1. Adding a new employee- POST request should be created to add a new employee.
The API endpoint would be /employee/add. The request body contains the details of the employee.
HTTP response should be 201. 

Json Request 
{ 

    "name":"userone", 
    "age":22, 
    "location":"Trichy" , 
    "department":"Electrical", 
    "experience":2, 
    "phone":7338508308, 
    "email":"userone1@gmail.com" 

} 

Json Response  

{ 

    "id": 1, 
    "name": "userone", 
    "age": 22, 
    "location": "Trichy", 
    "department": "Electrical", 
    "experience": 2, 
    "dateOfJoining": "15/12/2022", 
    "phone": 7338508308, 
    "email": "userone1@gmail.com" 

} 


curl command ->

curl --location 'localhost:8080/employee/add' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name":"userone",
    "age":22,
    "location":"Trichy" ,
    "department":"Electrical",
    "experience":2,
    "phone":7338508308,
    "email":"userone1@gmail.com"
}'
 

 

2.Updating employee’s experience can be updated by PUT request to endpoint /employee/{id}.
 The request body would contain experience. If id validations failed and the data is not 
 updated into the collection, then you should send a response code of 400 

curl command ->

curl --location --request PUT 'localhost:8080/employee/1' \
--header 'Content-Type: application/json' \
--data '{

    "experience":3
}'


3.Getting employee by id - GET request to endpoint /employee/{department} should return
 all the employees with this department. The HTTP response code should be 200. 
 If no employee return with this department, return a response code of 400. 

curl command ->

curl --location 'localhost:8080/employee/Electrical'

4.Deleting employee by id - DELETE request to endpoint /employee/{id} should delete the 
 corresponding employee. The HTTP response code should be 200. If id validations failed
 and the data is not deleted from the collection, then you should send a response code of 400 

curl command ->

curl --location --request DELETE 'localhost:8080/employee/1'
 
This paste expires in <5 min. Public IP access. Share whatever you see with others in seconds with Context. Terms of ServiceReport this
